ku byTest
{
    system biao identity.skill "身份技能表" (
    string belong "所属类型"
    , string name "名称"
    , string[] scenes "场景"
    , string[] modifiers "修饰符"
    , string[] parameters "参数"
    , string returnType "返回类型"
    , string body "技能体")
    {
        { ClientStart, main "客户端入口点", { client }, { static }, { string[] args "启动参数"}, void, {  } }
        { ServerStart, main "服务端入口点", { server }, { static }, { string[] args "启动参数" }, void, {  } }
        { home, main "网页主方法，重写此方法以实现自定义的网页初始化逻辑", { web }, {  }, { string queryArgs "网页当前参数字符串，即url中?符后面的内容" }, void, {
            base.main(queryArgs);      
            tString.testString();
            tObject.testObject();
            tChar.testChar();
            tByte.testByte();
            tShort.testShort();
            tLong.testLong();
            tInt.testInt();
            tFloat.testFloat();
            tDouble.testDouble();
            tDecimal.testDecimal();
            tDateTime.testDateTime();
            tTimer.tAllTimer();
            tSystem.tAllSystem();
            tDirectory.tAllDirectory();
            tFile.tAllFile();
            tDataTran.testDataTran();
            tMath.testMath();
            tStack.tTestStack();
            tqueue.tQueue();
            tHashSet.testHashSet();
            tDictionary.testDictionary();
            tStringBuilder.testStringBuilder();
            tSql.mormalSQl();
            tString.testString();
            tObject.testObject();
            tChar.testChar();
            tByte.testByte();
            tShort.testShort();
            tLong.testLong();
            tInt.testInt();
            tFloat.testFloat();
            tDouble.testDouble();
            tDecimal.testDecimal();
            tDateTime.testDateTime();
            tTimer.tAllTimer();
            tSystem.tAllSystem();
            tDirectory.tAllDirectory();
            tFile.tAllFile();
            tDataTran.testDataTran();
            tMath.testMath();
            tStack.tTestStack();
            tqueue.tQueue();
            tHashSet.testHashSet();
            tDictionary.testDictionary();
            tStringBuilder.testStringBuilder();
            tSql.mormalSQl();
           :identity testTable:.ormSQlWeb();
            Message.alert("测试已完成！");    
        } }
        { tSql, testSql, {  }, { static }, {  }, void, {
            mormalSQl();
        } }
        { tSql, mormalSQl, {  }, { static }, {  }, List<Row~testTable>, {
            scene(server)
            {
                var sqlResult = select  a.iID ,a.iID b, max(a.iID), count(a.iID) from testTable a group by a.iID  ;
                return sqlResult.rows;
            }
            scene(web)
            { 
                var sqlServerResult = tSql.:server mormalSQl:(); 
                var tmpOrm = select  max(a.iID) max, count(a.iID) count ,a.iID b by default   from : new identity:.testTable a group by iID ;
               // var tmpOrm = select  max(a.iID) max, count(a.iID) count, a.iID id ,a.iID number  by MyOrm  from testTable a,testOrm b group by a.iID;
     
                var sqlResult = select  a.iID ,a.iID b, max(a.iID), count(a.iID) from testTable a group by a.iID  ;
                System.currentWindow.log(sqlServerResult);
                System.currentWindow.log(sqlResult.rows);
                return sqlResult.rows;
            }
            return null;
            
   
        } }
    
        { testTable, ormSQlWeb, { web }, { static }, {  }, void, {
            List<MyOrm> tmpOrm = (select  max(a.iID) max, count(a.iID) count, a.iID id ,a.iID number  by MyOrm  from testTable a,testOrm b group by a.iID).rows;
            System.currentWindow.log(tmpOrm);
            var serverorm = :identity testTable:.:server ormSQLSerevr:(tmpOrm);
            System.currentWindow.log(serverorm);
        } }
        { testTable, ormSQLSerevr, { server,web }, { static }, {List<MyOrm>  f_myorm }, List<MyOrm>, {
            return f_myorm;
            List<MyOrm> tmpOrm = (select  max(a.iID) max, count(a.iID) count, a.iID id ,a.iID number  by MyOrm  from testTable a,testOrm b group by a.iID).rows;
            return tmpOrm;

        } }
     
        { tStringBuilder, testStringBuilder, {  }, { static }, {  }, void, {
            
            scene(server)
            {
                string testValue = "123457";
            StringBuilder testResult = new StringBuilder(testValue);
            StringBuilder builder = new StringBuilder(3);
            builder.append(testValue,2,3);
            builder.append("f");
            byte b = 3;
            testResult.append(b);
            testResult.insert(3,b);
            bool b2 = true;
            testResult.append(b2);
            testResult.insert(3,b2);
            char c = 'c';
            testResult.append(c);
            testResult.insert(3,c);
            short s = 32;
            testResult.append(s);
            testResult.insert(3,s);
            int i = 2421541;
            testResult.append(i);
            testResult.insert(3,i);
            long l = 34214321313l;
            testResult.append(l);
            testResult.insert(3,l);
            float f =  45.87f;
            testResult.append(f);
            testResult.insert(3,f);
            double d = 6445.54541;
            testResult.append(d);
            testResult.insert(3,d);
            decimal d2 = 5545143.7845684m;
            testResult.append(d2);
            testResult.insert(3,d2);         
            Object o = "\r\nefwef\x34we";
            testResult.append(o); 
            testResult.insert(3,o);//server 添加结果为"efwe4we"
            string s2 = "\r\n\'\"qwer\x25";// server遇到\0,显示的右大括号会消失
            testResult.append(s2);
            testResult.append(s2,2,3);
            testResult.insert(3,s2);
            char[] chars = {'a','b','c','d'};
            testResult.append(chars);
            testResult.append(chars,2,2);
            testResult = testResult.remove(3,8);
            testResult.setCharAt(5,'2');
            string s3 = testResult.subString(3,5);
            char c2 = testResult.charAt(10);
            char[] chars2 = testResult.toCharArray();
            testResult.clear();
            }
            scene(web,client)
            {
                string testValue = "123457";
                StringBuilder testResult = new StringBuilder(testValue);
                StringBuilder builder = new StringBuilder(3);
                
                builder.append(testValue,2,3);
                builder.append("f");
                byte b = 3;
                testResult.append(b);
                Message.alert(testResult.toString());
                testResult.insert(3,b);
                Message.alert(testResult.toString());
                bool b2 = true;
                testResult.append(b2);
                Message.alert(testResult.toString());
                testResult.insert(3,b2);
                Message.alert(testResult.toString());
                char c = 'c';
                testResult.append(c);
                Message.alert(testResult.toString());
                testResult.insert(3,c);
                Message.alert(testResult.toString());
                short s = 32;
                testResult.append(s);
                Message.alert(testResult.toString());
                testResult.insert(3,s);
                Message.alert(testResult.toString());
                int i = 2421541;
                testResult.append(i);
                Message.alert(testResult.toString());
                testResult.insert(3,i);
                Message.alert(testResult.toString());
                long l = 34214321313l;
                testResult.append(l);
                Message.alert(testResult.toString());
                testResult.insert(3,l);
                Message.alert(testResult.toString());
                float f =  45.87f;
                testResult.append(f);
                Message.alert(testResult.toString());
                testResult.insert(3,f);
                Message.alert(testResult.toString());
                double d = 6445.54541;
                testResult.append(d);
                Message.alert(testResult.toString());
                testResult.insert(3,d);
                Message.alert(testResult.toString());
                decimal d2 = 5545143.7845684m;
                testResult.append(d2);
                Message.alert(testResult.toString());
                testResult.insert(3,d2);         
                Message.alert(testResult.toString());
                Object o = "\r\nefwef\x34we";
                testResult.append(o); 
                Message.alert(testResult.toString());
                testResult.insert(3,o);//server 添加结果为"efwe4we"
                Message.alert(testResult.toString());
                string s2 = "\r\n\'\"qwer\x25";// server遇到\0,显示的右大括号会消失
                testResult.append(s2);
                Message.alert(testResult.toString());
                testResult.append(s2,2,3);
                Message.alert(testResult.toString());
                testResult.insert(3,s2);
                Message.alert(testResult.toString());
                char[] chars = {'a','b','c','d'};
                testResult.append(chars);
                Message.alert(testResult.toString());
                testResult.append(chars,2,2);
                Message.alert(testResult.toString());
                testResult = testResult.remove(3,8);
                Message.alert(testResult.toString());
                testResult.setCharAt(5,'2');
                Message.alert(testResult.toString());
                string s3 = testResult.subString(3,5);
                char c2 = testResult.charAt(10);
                char[] chars2 = testResult.toCharArray();
                testResult.clear();
                Message.alert(testResult.toString());
                tStringBuilder.:server testStringBuilder:();
            }
        } }
        { tDictionary, testDictionary, {  }, { static }, {  }, void, {
            Dictionary<string,string> dictionary = new Dictionary<string, string>();
            dictionary.add("1","a");
            dictionary.add("2","b");
            bool b = dictionary.containsKey("1");
            bool b2 = dictionary.containsValue("a");
            dictionary.remove("1");
            dictionary.clear();
            scene(server)
            {
                
            }
            scene(web,client)
            {
                tDictionary.:server testDictionary:();
            }
        } }
        { tHashSet, testHashSet, {  }, { static }, {  }, void, {
            string[] strings = {"1","2","3" };
            List<string> list = new List<string>();
            list.add("a");
            list.add("b");
            list.add("c"); 
            HashSet<string> hashSet = new HashSet<string>(strings);
            HashSet<string> hashSet2 = new HashSet<string>(list);
            bool b = hashSet.add("add");
            bool b1 = hashSet.add("add");
            bool b2 = hashSet.contains("add");
            bool b3 = hashSet.remove("1");//web:remove无论是否成功，返回值均为undefine
            bool b4 = hashSet.remove("1");
            string[] strings2 = hashSet.toArray();
            hashSet.clear();     
            scene(server)
            {
                
            }
            scene(web)
            {
                tHashSet.:server testHashSet:();
            }       
        } }
        { tStack, tTestStack, {  }, { static }, {  }, void , {
            string[] testValue = {"w","2"};//返回值为栈的web函数无法显示使用server场景
            Stack<string> testResult = new Stack<string>(testValue); 
            testResult.push("top");
            string s = testResult.peek();
            string top = testResult.pop();
            bool b = testResult.contains("w");
            string[] strings = testResult.toArray();
            testResult.clear();
            scene(server)
            {
                
            }
            scene(web,client)
            {
                tStack.:server tTestStack:();
            }
        } }
        { tqueue, tQueue, {  }, { static }, {  }, void, {
            string[] testValue = {"1","2"};
            Queue<string> testResult = new Queue<string>(testValue);
            testResult.enqueue("3");
            string s = testResult.peek();
            string s2 = testResult.dequeue();
            bool b = testResult.contains("2");
            string[] strings = testResult.toArray();
            testResult.clear();
            scene(server)
            {
                
            }
            scene(web,client)
            {
                tqueue.:server tQueue:();
            }
        } }
        { tMath, testMath, {  }, { static }, {  }, void, {
            tShortAbs();
            //tIntAbs(); //编译错误
            tLongAbs();
            tFloatAbs();//结果错误，web接收server的float类型会多几个小数，如输入123.55，输出123.55000305175781
            tDoubleAbs();
            tDecimalAbs();
            tByteMax();
            tShortMax();
            tIntMax();
            tLongMax();
            tFloatMax();//结果错误，web接收server的float类型会多几个小数，如输入123.55，输出123.55000305175781
            tDoubleMax();
            tDecimalMax();
            tByteMin();
            tShortMin();
            tIntMin();
            tLongMin();
            tFloatMin();//结果错误，web接收server的float类型会多几个小数，如输入123.55，输出123.55000305175781
            tDoubleMin();
            tDecimalMin();
            tDoubleDefaultRound();
            tDecimalDefaultRound();
            tDoubleRound(); 
            tDecimalRound();
            tDoubleTruncate();
            tDecimalTruncate();
            tDoubleCeiling();
            tDecimalCeiling();
            tDoubleFloor();
            tDecimalFloor();
            tShortSign();
            tIntSign();
            tLongSign();
            tFloatSign();
            tDoubleSign();
            tDecimalSign();
            tIntAddExact();
            tLongAddExact();
            tBigMul();
            tIeeeRemainder();//结果错误，精度不一致
            tCbrt();//结果错误，精度不一致
            tSqrt();//结果错误，精度不一致
            tPow();//结果错误，精度不一致
            tExp();//结果错误，精度不一致
            tNaturalLog();//结果错误，精度不一致
            tLog10();//结果错误，精度不一致
            tLog(); //结果错误，精度不一致
            tAcos();//结果错误，精度不一致
            tAsin();//结果错误，精度不一致
            tAtan();//结果错误，精度不一致
            tAtan2();//结果错误，精度不一致
            tCos();//结果错误，精度
            tCosh();//结果错误，精度
            tSin();//结果错误，精度
            tSinh();//结果错误，精度
            tTan();//结果错误，精度
            tTanh();//结果错误，精度
            tToDegrees();//结果错误精度
            tToRadians();         
        } }
        { tMath, tShortAbs, {  }, { static }, {  }, short, { 
            short testValue = -100;
            short testResult = Math.abs(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                short serverResult = tMath.:server tShortAbs:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("abs(short): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("abs(short): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        //{ tMath, tIntAbs, {  }, { static }, {  }, int, {
        //    int testValue = -123;
        //    int testResult = Math.abs(testValue);
        //    scene(server)
        //    {
        //        Row~testTable intRow = new Row()~testTable;
        //        intRow.iint= testValue;
        //        int testTableID = System.autoID(testTable.:to:);
        //        intRow.iID = testTableID;
        //        insert by intRow;
        //        var databaseRsultList =  select Math.abs(a.iint) tmpv by default  from testTable a where a.iID == testTableID; 
        //        int databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("abs(int): server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("abs(int): server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        int serverResult = tMath.:server tIntAbs:();
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("abs(int): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("abs(int): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        { tMath, tLongAbs, {  }, { static }, {  }, long, {
            long testValue =  123456;
            long testResult = Math.abs(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                long serverResult = tMath.:server tLongAbs:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("abs(long): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("abs(long): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tFloatAbs, {  }, { static }, {  }, float, {
            float testValue = -123.55F;
            float testResult = Math.abs(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                float serverResult = tMath.:server tFloatAbs:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("abs(float): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("abs(float): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleAbs, {  }, { static }, {  }, double, {
            double testValue = -987.654;
            double testResult = Math.abs(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleAbs:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("abs(double): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("abs(double): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalAbs, {  }, { static }, {  }, decimal, {
            decimal testValue = 545.54m;
            decimal testResult = Math.abs(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalAbs:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("abs(decimal): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("abs(decimal): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.abs(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }    
        { tMath, tByteMax, {  }, { static }, {  }, byte, {
            byte testValue1 = -1;
            byte testValue2 = 1;
            byte testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                byte serverResult = tMath.:server tByteMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("bytemax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("bytemax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tShortMax, {  }, { static }, {  }, short, {
            short testValue1 = 1;
            short testValue2 = 1;
            short testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                short serverResult = tMath.:server tShortMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("shortmax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("shortmax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tIntMax, {  }, { static }, {  }, int, {
            int testValue1 = -1;
            int testValue2 = -2;
            int testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tIntMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("intmax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("intmax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tLongMax, {  }, { static }, {  }, long, {
            long testValue1 = 123456789;
            long testValue2 = -123456789;
            long testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                long serverResult = tMath.:server tLongMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("longmax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("longmax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tFloatMax, {  }, { static }, {  }, float, {
            float testValue1 = -1.123f;
            float testValue2 = -1.122f;
            float testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                float serverResult = tMath.:server tFloatMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("floatmax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("floatmax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleMax, {  }, { static }, {  }, double, {
            double testValue1 = 1.123;
            double testValue2 = -1.123;
            double testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("doublemax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("doublemax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalMax, {  }, { static }, {  }, decimal, {
            decimal testValue1 = -5614.45m;
            decimal testValue2 = 0;
            decimal testResult = Math.max(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalMax:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("decimalmax: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("decimalmax: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.max(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tByteMin, {  }, { static }, {  }, byte, {
            byte testValue1 = -1;
            byte testValue2 = 1;
            byte testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                byte serverResult = tMath.:server tByteMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("bytemin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("bytemin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tShortMin, {  }, { static }, {  }, short, {
            short testValue1 = 1;
            short testValue2 = 1;
            short testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                short serverResult = tMath.:server tShortMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("shortmin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("shortmin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tIntMin, {  }, { static }, {  }, int, {
            int testValue1 = -1;
            int testValue2 = -2;
            int testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tIntMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("intmin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("intmin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tLongMin, {  }, { static }, {  }, long, {
            long testValue1 = 123456789;
            long testValue2 = -123456789;
            long testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                long serverResult = tMath.:server tLongMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("longmin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("longmin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tFloatMin, {  }, { static }, {  }, float, {
            float testValue1 = -1.123f;
            float testValue2 = -1.122f;
            float testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                float serverResult = tMath.:server tFloatMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("floatmin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("floatmin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleMin, {  }, { static }, {  }, double, {
            double testValue1 = 1.123;
            double testValue2 = -1.123;
            double testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("doublemin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("doublemin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalMin, {  }, { static }, {  }, decimal, {
            decimal testValue1 = -5614.45m;
            decimal testValue2 = 0;
            decimal testResult = Math.min(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalMin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("decimalmin: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("decimalmin: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.min(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleDefaultRound, {  }, { static }, {  }, double, {
            double testValue = 1.5;
            double testResult = Math.round(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleDefaultRound:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("DoubleDefaultRound: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.round(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("DoubleDefaultRound: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.round(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalDefaultRound, {  }, { static }, {  }, decimal, {
            decimal testValue = -1.5m;
            decimal testResult = Math.round(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalDefaultRound:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("DecimalDefaultRound: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.round(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("DecimalDefaultRound: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.round(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleRound, {  }, { static }, {  }, double, {
            double testValue1 = 1.5;
            int testValue2 = 0;
            double testResult = Math.round(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleRound:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("doubleround: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.round(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("doubleround: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.round(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalRound, {  }, { static }, {  }, decimal, {
            decimal testValue1 = -10.55545m;
            int testValue2 = 3;
            decimal testResult = Math.round(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalRound:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("decimalround: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.round(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("decimalround: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.round(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleTruncate, {  }, { static }, {  }, double, {
            double testValue = 0.24;
            double testResult = Math.truncate(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleTruncate:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("DoubleTruncate: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.truncate(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("DoubleTruncate: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.truncate(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalTruncate, {  }, { static }, {  }, decimal, {
            decimal testValue = 0.556m;
            decimal testResult = Math.truncate(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalTruncate:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("Decimaltruncate: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.truncate(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("Decimaltruncate: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.truncate(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleCeiling, {  }, { static }, {  }, double, {
            double testValue = -1.64;
            double testResult = Math.ceiling(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleCeiling:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cDoubleceiling: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.ceiling(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cDoubleceiling: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.ceiling(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalCeiling, {  }, { static }, {  }, decimal, {
            decimal testValue = 1.25m;
            decimal testResult = Math.ceiling(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalCeiling:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cDecimalceiling: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.ceiling(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cDecimalceiling: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.ceiling(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleFloor, {  }, { static }, {  }, double, {
            double testValue = -1.64;
            double testResult = Math.floor(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tDoubleFloor:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cDoubleFloor: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.floor(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cDoubleFloor: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.floor(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalFloor, {  }, { static }, {  }, decimal, {
            decimal testValue = 1.25m;
            decimal testResult = Math.floor(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                decimal serverResult = tMath.:server tDecimalFloor:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cDecimalFloor: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.floor(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cDecimalFloor: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.floor(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tShortSign, {  }, { static }, {  }, int, { 
            short testValue = 0;
            int testResult = Math.sign(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tShortSign:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("ShortSign: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("ShortSign: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tIntSign, {  }, { static }, {  }, int, {
            int testValue = -123;
            int testResult = Math.sign(testValue);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                int serverResult = tMath.:server tIntSign:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sign(int): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sign(int): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tLongSign, {  }, { static }, {  }, int, {
            long testValue =  123456789;
            int testResult = Math.sign(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tLongSign:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sign(long): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sign(long): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tFloatSign, {  }, { static }, {  }, int, {
            float testValue = -123.123F;
            int testResult = Math.sign(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tFloatSign:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sign(float): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sign(float): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDoubleSign, {  }, { static }, {  }, int, {
            double testValue = -987.654;
            int testResult = Math.sign(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tDoubleSign:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sign(double): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sign(double): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tDecimalSign, {  }, { static }, {  }, int, {
            decimal testValue = -545.54m;
            int testResult = Math.sign(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tDecimalSign:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sign(decimal): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sign(decimal): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sign(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }    
        { tMath, tIntAddExact, {  }, { static }, {  }, int, {
            int testValue1 = 123456789;
            int testValue2 = -1234578954;
            int testResult = Math.addExact(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                int serverResult = tMath.:server tIntAddExact:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("IntAddExact: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.addExact(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("IntAddExact: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.addExact(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tLongAddExact, {  }, { static }, {  }, long, {
            long testValue1 = 922337203685477580l;
            long testValue2 = 922337203685477580l;
            long testResult = Math.addExact(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                long serverResult = tMath.:server tLongAddExact:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("LongAddExact: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.addExact(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("LongAddExact: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.addExact(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tBigMul, {  }, { static }, {  }, long, {
            int testValue1 = 2122337203;
            int testValue2 = 2122337203;
            long testResult = Math.bigMul(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                long serverResult = tMath.:server tBigMul:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("BigMul: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.bigMul(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("BigMul: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.bigMul(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tIeeeRemainder, {  }, { static }, {  }, double, {
            double testValue1 = -17.54;
            double testValue2 = 3.24;
            double testResult = Math.ieeeRemainder(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tIeeeRemainder:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("ieeeRemainder: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.ieeeRemainder(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("ieeeRemainder: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.ieeeRemainder(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tCbrt, {  }, { static }, {  }, double, {
            double testValue = 0.08;
            double testResult = Math.cbrt(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tCbrt:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cbrt: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.cbrt(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cbrt: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.cbrt(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tSqrt, {  }, { static }, {  }, double, {
            double testValue = 61615;
            double testResult = Math.sqrt(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tSqrt:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sqrt: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sqrt(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sqrt: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sqrt(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tPow, {  }, { static }, {  }, double, {
            double testValue1 = -0.14;
            int testValue2 = 5;
            double testResult = Math.pow(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tPow:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("pow: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.pow(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("pow: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.pow(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tExp, {  }, { static }, {  }, double, {
            double testValue = -0.64;
            double testResult = Math.exp(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tExp:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("exp: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.exp(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("exp: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.exp(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } } 
        { tMath, tNaturalLog, {  }, { static }, {  }, double, {
            double testValue = 7484.95494;
            double testResult = Math.log(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tNaturalLog:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("NaturalLog: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.log(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("NaturalLog: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.log(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tLog10, {  }, { static }, {  }, double, {
            double testValue = 7484.95494;
            double testResult = Math.log10(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tLog10:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("log10: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.log10(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("log10: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.log10(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tLog, {  }, { static }, {  }, double, {
            double testValue1 = 4534;
            double testValue2 = 453;
            double testResult = Math.log(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tLog:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("log: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.log(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("log: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.log(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tAcos, {  }, { static }, {  }, double, {
            double testValue = 0.5;
            double testResult = Math.acos(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tAcos:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("acos: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.acos(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("acos: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.acos(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tAsin, {  }, { static }, {  }, double, {
            double testValue = 0.5;
            double testResult = Math.asin(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tAsin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("asin: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.asin(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("asin: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.asin(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tAtan, {  }, { static }, {  }, double, {
            double testValue = 1;
            double testResult = Math.atan(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tAtan:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("atan: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.atan(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("atan: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.atan(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tAtan2, {  }, { static }, {  }, double, {
            double testValue1 = 1;
            double testValue2 = 1;
            double testResult = Math.atan2(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tAtan2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("atan2: server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.atan2(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("atan2: server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = Math.atan2(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tCos, {  }, { static }, {  }, double, { 
            double testValue = Math.PI/3.0;
            double testResult = Math.cos(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tCos:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cos: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.cos(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cos: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.cos(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tCosh, {  }, { static }, {  }, double, {    
            double testValue = Math.PI/3.0;
            double testResult = Math.cosh(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tCosh:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("cosh: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.cosh(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("cosh: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.cosh(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tSin, {  }, { static }, {  }, double, { 
            double testValue = Math.PI/6.0;
            double testResult = Math.sin(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tSin:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sin: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sin(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sin: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sin(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tSinh, {  }, { static }, {  }, double, {    
            double testValue = Math.PI/6.0;
            double testResult = Math.sinh(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tSinh:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("sinh: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sinh(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("sinh: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.sinh(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tTan, {  }, { static }, {  }, double, { 
            double testValue = Math.PI/4.0;
            double testResult = Math.tan(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tTan:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("tan: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.tan(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("tan: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.tan(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tMath, tTanh, {  }, { static }, {  }, double, {    
            double testValue = Math.PI/4.0;
            double testResult = Math.tanh(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                Double serverResult = tMath.:server tTanh:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("tanh: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.tanh(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("tanh: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.tanh(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }   
        { tMath, tToDegrees, {  }, { static }, {  }, double, {
            double testValue = Math.PI/2.0;
            double testResult = Math.toDegrees(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tToDegrees:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("toDegrees: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.toDegrees(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("toDegrees: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.toDegrees(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }   
        { tMath, tToRadians, {  }, { static }, {  }, double, {
            double testValue = 270;
            double testResult = Math.toRadians(testValue);
            scene(server)
            {

            }
            scene(web,client)
            {
                double serverResult = tMath.:server tToRadians:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("toRadians: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.toRadians(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("toRadians: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Math.toRadians(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }      
        { tDataTran, testDataTran, {  }, { static }, {  }, void, {
            tDataTran.tString(null);  
            //tDataTran.tInt(1);
            //tDataTran.tChar('c');   
            tDataTran.tDateTime(null);
            byte b = 1;             
            tDataTran.tByte(b);     
            
            short s = 1;
            tDataTran.tShort(s);   
            tDataTran.tFloat(1f);
            //tDataTran.tDouble(23.5);
           // tDataTran.tLong(32);
           // tDataTran.tDecimal(15);
           // tDataTran.tBool(true);
            Dictionary<string,string> dictionary = new Dictionary<string, string>();
          //  dictionary.add("w","sw");
            tDataTran.tDictionary(dictionary);//字符串原因导致字典也错了
        } }
        { tDataTran, tDictionary, {  }, { static }, { Dictionary<string,string> webDictionary  }, Dictionary<string,string>, {
            Dictionary<string,string> dictionary = new Dictionary<string, string>();
            dictionary.add("wrf","e3f\r\n\'\"");
            scene(server)
            {
                if(dictionary.toString()!=webDictionary.toString())
                {
                    writeLog.writeError("字典错误");
                }
                else
                {
                    writeLog.write("字典正确");
                }  
            }
            scene(web)
            {
                Dictionary<string,string> serverDictionary = tDataTran.:server tDictionary:(dictionary);
                if(serverDictionary.toString()!=dictionary.toString())
                {
                    Message.alert("fail");
                }
                else
                {
                    Message.alert("字典传输网页端正确");
                }
            }
           
            return dictionary;
        } } 
        { tDataTran, tString, {  }, { static }, { string webStr}, string, {
            string str = "!@#$%^&*()_+[]{}\\\r\n\t\'\"";
            scene(server)
            {
                if(str != webStr)
                {
                    writeLog.writeError("string数据web传输有误\r\n输入数据：" + str + "\r\nserver结果：" + str + "\r\nweb结果：" + webStr + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string数据web传输正确\r\n输入数据：" + str + "\r\nserver结果：" + str  + datetime.getNow().toString() + "\r\n");
                }
            }
            scene(web,client)
            {
                string serverStr = tDataTran.:server tString:(str);
                if(str != serverStr)
                {
                    writeLog.writeError("string数据server传输有误\r\n输入数据：" + str + "\r\nserver结果：" + serverStr + "\r\nweb结果：" + str + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string数据server传输正确\r\n输入数据：" + str + "\r\nserver结果：" + str  + datetime.getNow().toString() + "\r\n");
                }
            }
            return str;
        } }
        { tDataTran, tChar, {  }, { static }, { char webChar}, char, {
            char c = 'c';
            scene(server)
            {
                if(c != webChar)
                {
                    writeLog.writeError("char数据web传输有误\r\n输入数据：" + c + "\r\nserver结果：" + c + "\r\nweb结果：" + webChar + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                char serverChar = tDataTran.:server tChar:(c);
                if(c != serverChar)
                {
                    writeLog.writeError("char数据server传输有误\r\n输入数据：" + c + "\r\nserver结果：" + serverChar + "\r\nweb结果：" + c + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return c;
        } }
        //需要手工二次判断
        { tDataTran, tDateTime, {  }, { static }, { datetime webDateTime}, datetime, {
            datetime dateTime = datetime.getNow();
            scene(server)
            {
                if(dateTime != webDateTime)
                {
                    writeLog.writeError("dateTime数据web传输有误\r\n输入数据：" + dateTime + "\r\nserver结果：" + dateTime + "\r\nweb结果：" + webDateTime + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                datetime serverDateTime = tDataTran.:server tDateTime:(dateTime);
                if(dateTime != serverDateTime)
                {
                    writeLog.writeError("dateTime数据server传输有误\r\n输入数据：" + dateTime + "\r\nserver结果：" + serverDateTime + "\r\nweb结果：" + dateTime + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return dateTime;
        } }
        { tDataTran, tByte, {  }, { static }, { byte webByte}, byte, {
            byte b = 42;
            scene(server)
            {
                if(b != webByte)
                {
                    writeLog.writeError("byte数据web传输有误\r\n输入数据：" + b + "\r\nserver结果：" + b + "\r\nweb结果：" + webByte + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                byte serverByte = tDataTran.:server tByte:(b);
                if(b != serverByte)
                {
                    writeLog.writeError("byte数据server传输有误\r\n输入数据：" + b + "\r\nserver结果：" + serverByte + "\r\nweb结果：" + b + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return b;
        } }
        { tDataTran, tShort, {  }, { static }, { short webShort}, short, {
            short s = 42;
            scene(server)
            {
                if(s != webShort)
                {
                    writeLog.writeError("short数据web传输有误\r\n输入数据：" + s + "\r\nserver结果：" + s + "\r\nweb结果：" + webShort + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                short serverShort = tDataTran.:server tShort:(s);
                if(s != serverShort)
                {
                    writeLog.writeError("short数据server传输有误\r\n输入数据：" + s + "\r\nserver结果：" + serverShort + "\r\nweb结果：" + s + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return s;
        } }
        { tDataTran, tInt, {  }, { static }, { int webInt}, int, {
            int i = 1;
            scene(server)
            {
                if(i != webInt)
                {
                    writeLog.writeError("int数据web传输有误\r\n输入数据：" + i + "\r\nserver结果：" + i + "\r\nweb结果：" + webInt + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                int serverInt = tDataTran.:server tInt:(i);
                if(i != serverInt)
                {
                    writeLog.writeError("short数据server传输有误\r\n输入数据：" + i + "\r\nserver结果：" + serverInt + "\r\nweb结果：" + i + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return i;
        } }
        { tDataTran, tFloat, {  }, { static }, { float webFloat}, float, {
            float f = 1.2587f;
            scene(server)
            {
                if(f != webFloat)
                {
                    writeLog.writeError("float数据web传输有误\r\n输入数据：" + f + "\r\nserver结果：" + f + "\r\nweb结果：" + webFloat + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                float serverFloat = tDataTran.:server tFloat:(f);
                if(f != serverFloat)
                {
                    writeLog.writeError("float数据server传输有误\r\n输入数据：" + f + "\r\nserver结果：" + serverFloat + "\r\nweb结果：" + f + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return f;
        } }
        { tDataTran, tDouble, {  }, { static }, { double webDouble}, double, {
            double d = 1.10154;
            scene(server)
            {
                if(d != webDouble)
                {
                    writeLog.writeError("double数据web传输有误\r\n输入数据：" + d + "\r\nserver结果：" + d + "\r\nweb结果：" + webDouble + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                double serverDoule = tDataTran.:server tDouble:(d);
                if(d != serverDoule)
                {
                    writeLog.writeError("double数据server传输有误\r\n输入数据：" + d + "\r\nserver结果：" + serverDoule + "\r\nweb结果：" + d + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return d;
        } }
        { tDataTran, tLong, {  }, { static }, { long webLong}, long, {
            long l = 110;
            scene(server)
            {
                if(l != webLong)
                {
                    writeLog.writeError("long数据web传输有误\r\n输入数据：" + l + "\r\nserver结果：" + l + "\r\nweb结果：" + webLong + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                long serverLong = tDataTran.:server tLong:(l);
                if(l != serverLong)
                {
                    writeLog.writeError("long数据server传输有误\r\n输入数据：" + l + "\r\nserver结果：" + serverLong + "\r\nweb结果：" + l + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return l;
        } }
        { tDataTran, tDecimal, {  }, { static }, { decimal webDecimal}, decimal, {
            decimal dm = 0.6m;
            scene(server)
            {
                if(dm != webDecimal)
                {
                    writeLog.writeError("decimal数据web传输有误\r\n输入数据：" + dm + "\r\nserver结果：" + dm + "\r\nweb结果：" + webDecimal + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                decimal serverDecimal = tDataTran.:server tDecimal:(dm);
                if(dm != serverDecimal)
                {
                    writeLog.writeError("decimal数据server传输有误\r\n输入数据：" + dm + "\r\nserver结果：" + serverDecimal + "\r\nweb结果：" + dm + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return dm;
        } }
        { tDataTran, tBool, {  }, { static }, { bool webBool}, bool, {
            bool b = true;
            scene(server)
            {
                if(b != webBool)
                {
                    writeLog.writeError("bool数据web传输有误\r\n输入数据：" + b + "\r\nserver结果：" + b + "\r\nweb结果：" + webBool + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            scene(web,client)
            {
                bool serverBool = tDataTran.:server tBool:(b);
                if(b != serverBool)
                {
                    writeLog.writeError("bool数据server传输有误\r\n输入数据：" + b + "\r\nserver结果：" + serverBool + "\r\nweb结果：" + b + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    
                }
            }
            return b;
        } }
        
        { tFile, tAllFile, {  }, { static }, {  }, void, {
            scene(server)
            {
                byte[] bytes = {1,2,3,4};
                File.write("D:\\TestLog\\testfile1.txt",bytes,false);
                string[] strings = {"a","b","c","d"};
                File.write("D:\\TestLog\\testfile1.txt",strings,true);
                File.write("D:\\TestLog\\testfile1.txt",strings,true,Encoding.Unicode);
                string s = "ABCD";
                File.write("D:\\TestLog\\testfile1.txt",s,true);
                File.write("D:\\TestLog\\testfile1.txt",s,true,Encoding.Unicode);
                File.copy("D:\\TestLog\\testfile2.txt","D:\\TestLog\\testfile3.txt");
                File.delete("D:\\TestLog\\testfile4.txt");
                bool b = File.exists("D:\\TestLog\\testfile3.txt");
                File.move("D:\\TestLog\\testfile5.txt","D:\\TestLog\\testfile6.txt");
                File.copy("D:\\TestLog\\testfile7.txt","D:\\TestLog\\testfile8.txt",true);
                File.copy("D:\\TestLog\\testfile9.txt","D:\\TestLog\\testfile10.txt",false);
                byte[] bytes2 = File.readAllBytes("D:\\TestLog\\testfile1.txt");
                string[] strings2 = File.readAllLines("D:\\TestLog\\testfile1.txt");
                string[] strings3 = File.readAllLines("D:\\TestLog\\testfile1.txt",Encoding.Unicode);
                string s2 = File.readAllText("D:\\TestLog\\testfile1.txt");
                string s3 = File.readAllText("D:\\TestLog\\testfile1.txt",Encoding.Unicode);
                File.write("D:\\TestLog\\testfile1.txt",bytes,true);
                File.write("D:\\TestLog\\testfile1.txt",strings,true);
                File.write("D:\\TestLog\\testfile1.txt",strings,true,Encoding.Unicode);
                File.write("D:\\TestLog\\testfile1.txt",s,true);
                File.write("D:\\TestLog\\testfile1.txt",s,true,Encoding.Unicode);
            
            }
            scene(web,client)
            {
                tFile.:server tAllFile:();
            }
        } }
        { tDirectory, tAllDirectory, {  }, { static }, {  }, void, {
           scene(server)
            {
               Directory.createDirectory("d:\\TestLog\\ByTest\\testDirectory\\son\\grson");
               Directory.delete("d:\\TestLog\\ByTest\\testDirectory",false);
               Directory.createDirectory("d:\\TestLog\\ByTest\\testDirectory\\son\\grson");
               Directory.delete("d:\\TestLog\\ByTest\\testDirectory",true);
               bool q = Directory.exists("d:\\TestLog\\ByTest");
               string[] strings = Directory.getDirectories("d:\\TestLog");
               string s = Directory.getDirectoryRoot("d:\\TestLog");
               string[] strings2 = Directory.getFiles("d:\\TestLog");
               Directory.move("D:\\TestLog\\testdir2","D:\\TestLog\\testdir1");
            }
            scene(web)
            {
                tDirectory.:server tAllDirectory:();
            }
        } }
        //根据autoid判断
        { tSystem, tAllSystem, {  }, { static }, {  }, int[], {
            int[] testResult = new int[8];
            int a = System.autoID(testTable.:to:);
            int a2 = System.autoID(testTable.:to:);
            int b = System.autoID(testTable.:to:,2);
            int b2 = System.autoID(testTable.:to:,2);
            int c = System.autoID(testTable.:to:,true);
            int c2 = System.autoID(testTable.:to:,true);
            int d = System.autoID(testTable.:to:,3,false);
            int d2 = System.autoID(testTable.:to:,3,false);
            testResult[0] = a;
            testResult[1] = a2;
            testResult[2] = b;
            testResult[3] = b2;
            testResult[4] = c;
            testResult[5] = c2;
            testResult[6] = d;
            testResult[7] = d2;
            scene(server)
            {
                
            }
            scene(web,client)
            {
                int[] serverResult = tSystem.:server tAllSystem:();
                if(serverResult.toString() != testResult.toString())
                {
                    writeLog.writeError("server和web autoId结果打印：\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
          
        } }
        { tTimer, tAllTimer, {  }, { static }, {  }, void, {
            
            Timer timer = new Timer();
            timer.start();  
            scene(web,client)
            {
                timer.timeout+=(OBJECT sender, TimeoutEventArgs args)
                {
                    //Message.alert("timer");
                    tTimer.:server tAllTimer:();
                    timer.stop();
                };
            }
            scene(server)
            {
                timer.timeout+=(OBJECT sender, TimeoutEventArgs args)
                {
                    writeLog.write("timer启动");
                    timer.stop();
                };
            }
        } }
        { tBool, testBool, {  }, { static }, {  }, void, {
            //tBool.tParse();//编译错误，bool为错误的查询类型，但其某些函数却支持数据库端执行
            tBool.tEquals();
            tBool.tToString();
        } }
        //{ tBool, tParse, {  }, { static }, {  }, bool, {
        //    string testValue = "False";
        //    bool testResult = bool.parse(testValue);
        //    scene(server)
        //    {
        //        Row~testTable stringRow = new Row()~testTable;
        //         stringRow.iString= testValue;
        //        int testTableID = System.autoID(testTable.:to:);
        //        stringRow.iID = testTableID;
        //        insert by stringRow;
        //        var databaseRsultList =  select bool.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
        //        bool databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = bool.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = bool.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        bool serverResult = tBool.:server tParse:(); 
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = bool.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = bool.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        { tBool, tEquals, {  }, { static }, {  }, bool, {
            bool testValue = false;
            bool testResult = testValue.equals(false);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tBool.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(false)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(false)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tBool, tToString, {  }, { static }, {  }, string, {
            bool testValue = false;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable boolRow = new Row()~testTable;
                boolRow.ibool = testValue;
                int testTableID = System.autoID(testTable.:to:);
                boolRow.iID = testTableID;
                insert by boolRow;
                var databaseRsultList =  select a.ibool.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tDecimal.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDateTime, testDateTime, {  }, { static }, {  }, void, {
            tDateTime.tCompare();
            tDateTime.tCompareTo();
            tDateTime.tCreate1();
            tDateTime.tCreate2();
            tDateTime.tCreate3();
            tDateTime.tParse(); 
            tDateTime.tAddYears();//执行错误，web未找到该函数
            //tDateTime.tAddMonths();//执行错误，web未找到该函数
            //tDateTime.tAddDays();//执行错误，web未找到该函数
            //tDateTime.tAddHours();//执行错误，web未找到该函数
            //tDateTime.tAddMinutes();//执行错误，web未找到该函数
            //tDateTime.tAddSeconds();//执行错误，web未找到该函数
            //tDateTime.tAddMilliseconds();//执行错误，web未找到该函数
            //tDateTime.tDiffDays();
            //tDateTime.tDiffHours();
            //tDateTime.tDiffMinutes();
            //tDateTime.tDiffSeconds();
            //tDateTime.tDiffMilliseconds();//编译错误，无法确定是否在数据库中执行
            tDateTime.tEquals();
            tDateTime.tFormat();
        } }       
        { tDateTime, tCompare, {  }, { static }, {  }, int, {
            string tmpDateString1 = "2000-01-01 00:00:00.0000000";
            string tmpDateString2 = "2001-01-01 00:00:00.0000000";
            datetime testValue1 = datetime.parse(tmpDateString1);
            datetime testValue2 = datetime.parse(tmpDateString2);
            int testResult = datetime.compare(testValue1,testValue2);
            scene(server)
            {
              
            }
            scene(web,client)
            {
                int serverResult = tDateTime.:server tCompare:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("datatime.compare: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = datetime.compare(testValue1,testValue2)" + "\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.compare: server和web数据一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = datetime.compare(testValue1,testValue2)" +"\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDateTime, tCompareTo, {  }, { static }, {  }, int, {
            string tmpDateString = "2001-01-01 00:00:00.0000000";
            datetime testValue = datetime.parse(tmpDateString);
            int testResult = testValue.compareTo(datetime.getNow());
            scene(server)
            {
                
            }
            scene(web,client)
            {
                int serverResult = tDateTime.:server tCompareTo:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("datatime.compareTo: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.compareTo(datetime.getNow())"  +   "\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.compareTo: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.compareTo(datetime.getNow())"  + "\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDateTime, tCreate1, {  }, { static }, {  }, datetime, {
            datetime testResult = datetime.create(1,2,3,4,5,6,7);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tCreate1:();
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datatime.create(精确到毫秒): server和web数据不一致\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.create(精确到毫秒): server和web数据一致\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDateTime, tCreate2, {  }, { static }, {  }, datetime, {
            datetime testResult = datetime.create(1,2,3,4,5,6);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tCreate2:();
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datatime.create(精确到秒): server和web数据不一致\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.create(精确到秒): server和web数据一致\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDateTime, tCreate3, {  }, { static }, {  }, datetime, {
            datetime testResult = datetime.create(1,2,3);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tCreate3:();
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datatime.create(精确到天): server和web数据不一致\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.create(精确到天): server和web数据一致\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDateTime, tParse, {  }, { static }, {  }, datetime, {
            string testValue = "2000-01-01 00:00:00.000";
            datetime testResult = datetime.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select datetime.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = datetime.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = datetime.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tParse:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = datetime.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = datetime.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddYears, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addYears(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addYears(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addYears: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addYears(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addYears: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addYears(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddYears:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addYears: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addYears(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addYears: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addYears(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddMonths, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addMonths(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addMonths(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addMonths: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMonths(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addMonths: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMonths(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddMonths:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addMonths: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMonths(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addMonths: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMonths(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddDays, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addDays(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addDays(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addDays: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addDays(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addDays: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addDays(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddDays:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addDays: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addDays(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addDays: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addDays(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddHours, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addHours(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addHours(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addHours: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addHours(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addHours: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addHours(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddHours:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addHours: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addHours(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addHours: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addHours(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddMinutes, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addMinutes(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addMinutes(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addMinutes: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMinutes(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addMinutes: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMinutes(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddMinutes:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addMinutes: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMinutes(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addMinutes: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMinutes(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddSeconds, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addSeconds(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addSeconds(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addSeconds: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addSeconds(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addSeconds: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addSeconds(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddSeconds:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addSeconds: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addSeconds(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addSeconds: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addSeconds(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tAddMilliseconds, {  }, { static }, {  }, datetime, {
            string tmpDateString = "2001-01-01 10:10:10.100";
            datetime testValue = datetime.parse(tmpDateString);
            datetime testResult = testValue.addMilliseconds(-2);
            scene(server)
            {
                Row~testTable datetimeRow = new Row()~testTable;
                datetimeRow.iDatatime= testValue;
                int testTableID = System.autoID(testTable.:to:);
                datetimeRow.iID = testTableID;
                insert by datetimeRow;
                var databaseRsultList =  select a.iDatatime.addMilliseconds(-2) tmpv by default  from testTable a where a.iID == testTableID; 
                datetime databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult.equals(databaseResult) == false)
                {
                    writeLog.writeError("datetime.addMilliseconds: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMilliseconds(-2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addMilliseconds: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMilliseconds(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                datetime serverResult = tDateTime.:server tAddMilliseconds:(); 
                if(testResult.equals(serverResult) == false)
                {
                    writeLog.writeError("datetime.addMilliseconds: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMilliseconds(-2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.addMilliseconds: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.addMilliseconds(-2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        //{ tDateTime, tDiffDays, {  }, { static }, {  }, double, {
        //    string tmpDateString1 = "2000-01-01 00:00:00.0000000";
        //    string tmpDateString2 = "2000-01-05 00:00:00.0000000";
        //    datetime testValue1 = datetime.parse(tmpDateString1);
        //    datetime testValue2 = datetime.parse(tmpDateString2);
        //    double testResult = testValue1.diffDays(testValue2);
        //    scene(server)
        //    {
        //        Row~testTable datetimeRow1 = new Row()~testTable;
        //        datetimeRow1.iDatatime= testValue1;
        //        int testTableID1 = System.autoID(testTable.:to:);
        //        Row~testTable datetimeRow2 = new Row()~testTable;
        //        datetimeRow2.iDatatime = testValue2;
        //        int testTableID2 = System.autoID(testTable.:to:);
        //        insert by datetimeRow1;
        //        insert by datetimeRow2;
        //        datetime datebaseTestValue2 = (select a.iDatatime from testTable a where a.iID == testTableID2).rows[0].iDatatime;
        //        var databaseRsultList =  select a.iDatatime.diffDays(datebaseTestValue2) tmpv by default  from testTable a where a.iID == testTableID1; 
        //        double databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("datetime.diffDays: server和database数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffDays(testValue2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffDays: server和database数据一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffDays(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        double serverResult = tDateTime.:server tDiffDays:(); 
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("datetime.diffDays: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffDays(testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffDays: server和web数据一致\r\n输入数据1：" + testValue1 +"。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffDays(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        //{ tDateTime, tDiffHours, {  }, { static }, {  }, double, {
        //    string tmpDateString1 = "2000-01-01 11:45:25.1000000";
        //    string tmpDateString2 = "2000-01-05 2:30:25.1000000";
        //    datetime testValue1 = datetime.parse(tmpDateString1);
        //    datetime testValue2 = datetime.parse(tmpDateString2);
        //    double testResult = testValue1.diffHours(testValue2);
        //    scene(server)
        //    {
        //        Row~testTable datetimeRow1 = new Row()~testTable;
        //        datetimeRow1.iDatatime= testValue1;
        //        int testTableID1 = System.autoID(testTable.:to:);
        //        Row~testTable datetimeRow2 = new Row()~testTable;
        //        datetimeRow2.iDatatime = testValue2;
        //        int testTableID2 = System.autoID(testTable.:to:);
        //        insert by datetimeRow1;
        //        insert by datetimeRow2;
        //        datetime datebaseTestValue2 = (select a.iDatatime from testTable a where a.iID == testTableID2).rows[0].iDatatime;
        //        var databaseRsultList =  select a.iDatatime.diffHours(datebaseTestValue2) tmpv by default  from testTable a where a.iID == testTableID1; 
        //        double databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("datetime.diffHours: server和database数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffHours(testValue2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffHours: server和database数据一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffHours(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        double serverResult = tDateTime.:server tDiffHours:(); 
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("datetime.diffHours: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffHours(testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffHours: server和web数据一致\r\n输入数据1：" + testValue1 +"。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffHours(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        //{ tDateTime, tDiffMinutes, {  }, { static }, {  }, double, {
        //    string tmpDateString1 = "2000-01-01 00:00:00.0000000";
        //    string tmpDateString2 = "2000-01-05 00:00:00.0000000";
        //    datetime testValue1 = datetime.parse(tmpDateString1);
        //    datetime testValue2 = datetime.parse(tmpDateString2);
        //    double testResult = testValue1.diffMinutes(testValue2);
        //    scene(server)
        //    {
        //        Row~testTable datetimeRow1 = new Row()~testTable;
        //        datetimeRow1.iDatatime= testValue1;
        //        int testTableID1 = System.autoID(testTable.:to:);
        //        Row~testTable datetimeRow2 = new Row()~testTable;
        //        datetimeRow2.iDatatime = testValue2;
        //        int testTableID2 = System.autoID(testTable.:to:);
        //        insert by datetimeRow1;
        //        insert by datetimeRow2;
        //        datetime datebaseTestValue2 = (select a.iDatatime from testTable a where a.iID == testTableID2).rows[0].iDatatime;
        //        var databaseRsultList =  select a.iDatatime.diffMinutes(datebaseTestValue2) tmpv by default  from testTable a where a.iID == testTableID1; 
        //        double databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("datetime.diffMinutes: server和database数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMinutes(testValue2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffMinutes: server和database数据一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMinutes(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        double serverResult = tDateTime.:server tDiffMinutes:(); 
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("datetime.diffMinutes: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMinutes(testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffMinutes: server和web数据一致\r\n输入数据1：" + testValue1 +"。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMinutes(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        //{ tDateTime, tDiffSeconds, {  }, { static }, {  }, double, {
        //    string tmpDateString1 = "2000-01-01 00:00:00.0000000";
        //    string tmpDateString2 = "2000-01-05 00:00:00.0000000";
        //    datetime testValue1 = datetime.parse(tmpDateString1);
        //    datetime testValue2 = datetime.parse(tmpDateString2);
        //    double testResult = testValue1.diffSeconds(testValue2);
        //    scene(server)
        //    {
        //        Row~testTable datetimeRow1 = new Row()~testTable;
        //        datetimeRow1.iDatatime= testValue1;
        //        int testTableID1 = System.autoID(testTable.:to:);
        //        Row~testTable datetimeRow2 = new Row()~testTable;
        //        datetimeRow2.iDatatime = testValue2;
        //        int testTableID2 = System.autoID(testTable.:to:);
        //        insert by datetimeRow1;
        //        insert by datetimeRow2;
        //        datetime datebaseTestValue2 = (select a.iDatatime from testTable a where a.iID == testTableID2).rows[0].iDatatime;
        //        var databaseRsultList =  select a.iDatatime.diffSeconds(datebaseTestValue2) tmpv by default  from testTable a where a.iID == testTableID1; 
        //        double databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("datetime.diffSeconds: server和database数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffSeconds(testValue2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffSeconds: server和database数据一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffSeconds(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        double serverResult = tDateTime.:server tDiffSeconds:(); 
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("datetime.diffSeconds: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffSeconds(testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffSeconds: server和web数据一致\r\n输入数据1：" + testValue1 +"。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffSeconds(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        //{ tDateTime, tDiffMilliseconds, {  }, { static }, {  }, double, {
        //    string tmpDateString1 = "2000-01-01 00:00:00.0000000";
        //    string tmpDateString2 = "2000-01-05 00:00:00.0000000";
        //    datetime testValue1 = datetime.parse(tmpDateString1);
        //    datetime testValue2 = datetime.parse(tmpDateString2);
        //    double testResult = testValue1.diffMilliseconds(testValue2);
        //    scene(server)
        //    {
        //        Row~testTable datetimeRow1 = new Row()~testTable;
        //        datetimeRow1.iDatatime= testValue1;
        //        int testTableID1 = System.autoID(testTable.:to:);
        //        Row~testTable datetimeRow2 = new Row()~testTable;
        //        datetimeRow2.iDatatime = testValue2;
        //        int testTableID2 = System.autoID(testTable.:to:);
        //        insert by datetimeRow1;
        //        insert by datetimeRow2;
        //        datetime datebaseTestValue2 = (select a.iDatatime from testTable a where a.iID == testTableID2).rows[0].iDatatime;
        //        var databaseRsultList =  select a.iDatatime.diffMilliseconds(datebaseTestValue2) tmpv by default  from testTable a where a.iID == testTableID1; 
        //        double databaseResult = databaseRsultList.rows[0].tmpv;
        //        if(testResult!=databaseResult)
        //        {
        //            writeLog.writeError("datetime.diffMilliseconds: server和database数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMilliseconds(testValue2)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffMilliseconds: server和database数据一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMilliseconds(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
        //        }
        //    }
        //    scene(web,client)
        //    {
        //        double serverResult = tDateTime.:server tDiffMilliseconds:(); 
        //        if(testResult!=serverResult)
        //        {
        //            writeLog.writeError("datetime.diffMilliseconds: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMilliseconds(testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //        else
        //        {
        //            writeLog.write("datetime.diffMilliseconds: server和web数据一致\r\n输入数据1：" + testValue1 +"。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.diffMilliseconds(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
        //        }
        //    }
        //    return testResult;
        //} }
        { tDateTime, tEquals, {  }, { static }, {  }, bool, {
            string tmpDateString1 = "2000-01-01 00:00:00.0000000";
            string tmpDateString2 = "2000-01-05 00:00:00.0000000";
            datetime testValue1 = datetime.parse(tmpDateString1);
            OBJECT testValue2 = datetime.parse(tmpDateString2);
            bool testResult = testValue1.equals(testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                bool serverResult = tDateTime.:server tEquals:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("datetime.equals: server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.equals(testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("datetime.equals: server和web数据一致\r\n输入数据1：" + testValue1 +"。输入数据2：" + testValue2 + "\r\n表达式：testResult = testValue1.equals(testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDateTime, tFormat, {  }, { static }, {  }, string, {
            string tmpDateString = "2001-01-01 00:00:00.0000000";
            datetime testValue = datetime.parse(tmpDateString);
            string testResult = testValue.format("yyyy-MM-dd");
            scene(server)
            {
                
            }
            scene(web,client)
            {
                string serverResult = tDateTime.:server tFormat:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("datatime.format: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.format(\"yyyy-MM-dd\")"  +   "\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.format: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.format(\"yyyy-MM-dd\")"  + "\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }  
        { tDateTime, tToString, {  }, { static }, {  }, string, {
            //string tmpDateString = "2001-01-01";
            datetime testValue = datetime.getNow();
            string testResult = testValue.toString();
            scene(server)
            {
                
            }
            scene(web,client)
            {
                string serverResult = tDateTime.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("datatime.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()"  +   "\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("datatime.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()"  + "\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }  
        
        { tDecimal, testDecimal, {  }, { static }, {  }, void, {
            tDecimal.tParse();//结果错误，database执行会去除小数部分
            tDecimal.tEquals();
            tDecimal.tToString();
        } }
        { tDecimal, tParse, {  }, { static }, {  }, decimal, {
            string testValue = "32767.25";
            decimal testResult = decimal.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select decimal.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                decimal databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("decimal.parse: server和database数据不一致\r\n输入数据: " + testValue + "\r\n表达式：testResult = decimal.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("decimal.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = decimal.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                decimal serverResult = tDecimal.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("decimal.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = decimal.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("decimal.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = decimal.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDecimal, tEquals, {  }, { static }, {  }, bool, {
            decimal testValue = 9.535M;
            bool testResult = testValue.equals(9.535M);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tDecimal.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("decimal.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(9.535M)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("decimal.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(9.535M)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDecimal, tToString, {  }, { static }, {  }, string, {
            decimal testValue =9.5M;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable decimalRow = new Row()~testTable;
                decimalRow.idecimal= testValue;
                int testTableID = System.autoID(testTable.:to:);
                decimalRow.iID = testTableID;
                insert by decimalRow;
                var databaseRsultList =  select a.idecimal.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("decimal.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("decimal.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tDecimal.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("decimal.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("decimal.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tDouble, testDouble, {  }, { static }, {  }, void, {
            tDouble.tParse();
            tDouble.tEquals();
            tDouble.tIsFinite();
            tDouble.tIsNaN();
            tDouble.tToString();
        } }
        { tDouble, tParse, {  }, { static }, {  }, double, {
            string testValue = "32767.25";
            double testResult = double.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select double.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                double databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("double.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("double.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                double serverResult = tDouble.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("double.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("double.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tDouble, tEquals, {  }, { static }, {  }, bool, {
            double testValue = 4.43;
            bool testResult = testValue.equals(4.43);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tDouble.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("double.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(4.43)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("double.: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(4.43)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDouble, tIsFinite, {  }, { static }, {  }, bool, {
            double testValue = 4.43;
            bool testResult = double.isFinite(testValue);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tDouble.:server tIsFinite:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("double.isFinite: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.isFinite(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("double.isFinite: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.isFinite(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDouble, tIsNaN, {  }, { static }, {  }, bool, {
            double testValue = 4.43;
            bool testResult = double.isNaN(testValue);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tDouble.:server tIsNaN:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("double.isNaN: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.isNaN(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("double.isNaN: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = double.isNaN(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tDouble, tToString, {  }, { static }, {  }, string, {
            double testValue =-4.43;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable doubleRow = new Row()~testTable;
                doubleRow.iDouble= testValue;
                int testTableID = System.autoID(testTable.:to:);
                doubleRow.iID = testTableID;
                insert by doubleRow;
                var databaseRsultList =  select a.iDouble.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("double.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("double.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tDouble.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("double.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("double.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tFloat, testFloat, {  }, { static }, {  }, void, {
            tFloat.tParse();
            tFloat.tEquals();
            tFloat.tToString();
        } }
        { tFloat, tParse, {  }, { static }, {  }, float, {
            string testValue = "32767.25";
            float testResult = float.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select float.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                float databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("float.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = float.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("float.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = float.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                float serverResult = tFloat.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("float.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = float.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("float.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = float.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tFloat, tEquals, {  }, { static }, {  }, bool, {
            float testValue = 9.535F;
            bool testResult = testValue.equals(9.535F);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tLong.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("float.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(9.535F)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("float.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(9.535F)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tFloat, tToString, {  }, { static }, {  }, string, {
            float testValue =-9.535F;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable floatRow = new Row()~testTable;
                floatRow.iFloat= testValue;
                int testTableID = System.autoID(testTable.:to:);
                floatRow.iID = testTableID;
                insert by floatRow;
                var databaseRsultList =  select a.iFloat.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("float.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("float.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tFloat.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("float.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("float.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tInt, testInt, {  }, { static }, {  }, void, {
            //tInt.tParse1();
            //tInt.tParse2();
            //tInt.tEquals();
            //tInt.tToString1();
            tInt.tToString2();//结果错误：web正常，server转2、8、16进制负数会出错
        } }
        { tInt, tParse1, {  }, { static }, {  }, int, {
            string testValue = "-32767";
            int testResult = int.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select int.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                long databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("int.parse(将数字字符串转换为它的等效Int值): server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = int.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("int.parse(将数字字符串转换为它的等效Int值): server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = int.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                int serverResult = tInt.:server tParse1:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("int.parse(将数字字符串转换为它的等效Int值): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = int.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("int.parse(将数字字符串转换为它的等效Int值): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = int.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tInt, tParse2, {  }, { static }, {  }, int, {
            string testValue = "-B432";
            int testResult = int.parse(testValue,16);
            scene(server)
            {
  
            }
            scene(web,client)
            {
                int serverResult = tInt.:server tParse2:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("int.parse(将指定进制的数字字符串转换为它的等效Int值): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = int.parse(testValue,16)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("int.parse(将指定进制的数字字符串转换为它的等效Int值): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = int.parse(testValue,16)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tInt, tEquals, {  }, { static }, {  }, bool, {
            int testValue = 32767;
            bool testResult = testValue.equals(32767);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tInt.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("int.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(32767)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("int.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(32767)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tInt, tToString1, {  }, { static }, {  }, string, {
            int testValue =-32768;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable intRow = new Row()~testTable;
                intRow.iint= testValue;
                int testTableID = System.autoID(testTable.:to:);
                intRow.iID = testTableID;
                insert by intRow;
                var databaseRsultList =  select a.iint.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("int.toString(将此Long值转换为十进制字符串): server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("int.toString(将此Long值转换为十进制字符串): server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tInt.:server tToString1:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("int.toString(将此Long值转换为十进制字符串): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("int.toString(将此Long值转换为十进制字符串): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tInt, tToString2, {  }, { static }, {  }, string, {
            int testValue1 =-35;
            int testValue2 = 2;
            string testResult = int.toString(testValue1,testValue2);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                string serverResult = tInt.:server tToString2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("int.toString(将指定Int值转换为指定进制的数字字符串): server和web数据不一致\r\n输入数据：" + testValue1 + "。" + testValue2  +"\r\n表达式：testResult = int.toString(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("int.toString(将指定Int值转换为指定进制的数字字符串): server和web数据一致\r\n输入数据：" + testValue1 + "。" + testValue2 + "\r\n表达式：testResult = int.toString(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tLong, testLong, {  }, { static }, {  }, void, {
            tLong.tParse();
            tLong.tEquals();
            tLong.tToString();
        } }
        { tLong, tParse, {  }, { static }, {  }, long, {
            string testValue = "32767";
            long testResult = long.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select long.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                long databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("long.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = long.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("long.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = long.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                long serverResult = tLong.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("long.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = long.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("long.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = long.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tLong, tEquals, {  }, { static }, {  }, bool, {
            long testValue = 32767;
            bool testResult = testValue.equals(32767);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tLong.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("long.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(32767)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("long.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(32767)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tLong, tToString, {  }, { static }, {  }, string, {
            long testValue =-32768;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable longRow = new Row()~testTable;
                longRow.iLong= testValue;
                int testTableID = System.autoID(testTable.:to:);
                longRow.iID = testTableID;
                insert by longRow;
                var databaseRsultList =  select a.iLong.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("long.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("long.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tLong.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("long.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("long.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tShort, testShort, {  }, { static }, {  }, void, {
            tShort.tParse();
            tShort.tEquals();
            tShort.tToString();
        } }
        { tShort, tParse, {  }, { static }, {  }, short, {
            string testValue = "32767";
            short testResult = short.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select short.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                short databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("short.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = short.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("short.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = short.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                short serverResult = tShort.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("short.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = short.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("short.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = short.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tShort, tEquals, {  }, { static }, {  }, bool, {
            short testValue = 32767;
            bool testResult = testValue.equals(32767);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tShort.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("short.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(32767)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("short.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(32767)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tShort, tToString, {  }, { static }, {  }, string, {
            short testValue =-32768;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable shortRow = new Row()~testTable;
                shortRow.iShort= testValue;
                int testTableID = System.autoID(testTable.:to:);
                shortRow.iID = testTableID;
                insert by shortRow;
                var databaseRsultList =  select a.iShort.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("short.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("short.toString: server和database数据一致\r\n输入数据：" + testValue + "r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tShort.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("short.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("short.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tByte, testByte, {  }, { static }, {  }, void, {
            tByte.tParse();
            tByte.tEquals();
            tByte.tToString();
        } }
        { tByte, tParse, {  }, { static }, {  }, byte, {
            string testValue = "127";
            byte testResult = byte.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select byte.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                byte databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("byte.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = byte.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("byte.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = byte.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                byte serverResult = tByte.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("byte.parse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = byte.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("byte.parse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = byte.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tByte, tEquals, {  }, { static }, {  }, bool, {
            byte testValue = 127;
            bool testResult = testValue.equals(127);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tByte.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("byte.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(127)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("byte.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(127)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tByte, tToString, {  }, { static }, {  }, string, {
            byte testValue =-128;
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable byteRow = new Row()~testTable;
                byteRow.iByte= testValue;
                int testTableID = System.autoID(testTable.:to:);
                byteRow.iID = testTableID;
                insert by byteRow;
                var databaseRsultList =  select a.iByte.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("byte.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("byte.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(client,web)
            {
                string serverResult = tByte.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("byte.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("byte.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tChar, testChar, {  }, { static }, {  }, void, {
            tChar.tParse();
            tChar.tToLower();
            tChar.tToUpper();
            tChar.tEquals();
            tChar.tToString();
        } }
        { tChar, tParse, {  }, { static }, {  }, char, {
            string testValue = "c";
            char testResult = Char.parse(testValue);
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select Char.parse(a.iString) tmpv by default  from testTable a where a.iID == testTableID; 
                char databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("char.parse: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.parse(testValue)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("char.parse: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                char serverResult = tChar.:server tParse:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("char.tParse: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.parse(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("char.tParse: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.parse(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tChar, tToLower, {  }, { static }, {  }, char, {
            char testValue = 'A';
            char testResult = Char.toLower(testValue);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                char serverResult = tChar.:server tToLower:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("char.toLower: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.toLower(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("char.toLower: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.toLower(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tChar, tToUpper, {  }, { static }, {  }, char, {
            char testValue = 'a';
            char testResult = Char.toUpper(testValue);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                char serverResult = tChar.:server tToUpper:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("char.toUpper: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.toUpper(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("char.toUpper: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = Char.toUpper(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tChar, tEquals, {  }, { static }, {  }, bool, {
            Char testValue = 'a';
            bool testResult = testValue.equals('a');
            scene(server)
            {
                
            }
            scene(web,client)
            {
                bool serverResult = tChar.:server tEquals:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("char.equals: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals('a')\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("char.equals: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals('a')\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tChar, tToString, {  }, { static }, {  }, string, {
            Char testValue = 'a';
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable charRow = new Row()~testTable;
                charRow.iChar= testValue;
                int testTableID = System.autoID(testTable.:to:);
                charRow.iID = testTableID;
                insert by charRow;
                var databaseRsultList =  select a.iChar.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("char.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("char.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tChar.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("char.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("char.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tObject, testObject, {  }, { static }, {  }, void, {
            tObject.tEquals1();
            tObject.tEquals2();
            tObject.tToString();
        } }
        { tObject, tEquals1, {  }, { static }, {  }, bool, {
            OBJECT testValue1 = "qwe";
            OBJECT testValue2 = "qwe";
            bool testResult = OBJECT.equals(testValue1,testValue2);
            scene(server)
            {
              
            }
            scene(web)
            {
                bool serverResult = tObject.:server tEquals1:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("object.equals(判断两个对象是否相等): server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = OBJECT.equals(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("object.equals(判断两个对象是否相等): server和web数据一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = OBJECT.equals(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tObject, tEquals2, {  }, { static }, {  }, bool, {
            OBJECT testValue = "qwe";
            bool testResult = testValue.equals("qwe");
            scene(server)
            {
                
            }
            scene(web)
            {
                bool serverResult = tObject.:server tEquals2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("object.equals(判断当前对象与目标对象是否相等): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(\"qwe\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("object.equals(判断当前对象与目标对象是否相等): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(\"qwe\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        { tObject, tToString, {  }, { static }, {  }, string, {
            Object testValue = "abc";
            string testResult = testValue.toString();
            scene(server)
            {
                
            }
            scene(web)
            {
                string serverResult = tObject.:server tToString:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("object.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                
                }
                else
                {
                    writeLog.write("object.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            return testResult;
        } }
        
        { tString, testString, {  }, { static }, {  }, void, {
            tString.tToString();
            tString.tSubstring();
            tString.tTrim();
            tString.tRTrim();
            tString.tLTrim();
            tString.tRemove1();
            tString.tRemove2();
            tString.tToUpper();
            tString.tToLower(); 
            tString.tReplaceReg();
            tString.tReplaceFirst();
            tString.tReplace();
            tString.tInsert();
            tString.tJoin1();
            tString.tJoin2();
            tString.tConcat();
            tString.tToCharArray();
            tString.tStartsWith();
            tString.tEndsWith();
            tString.tIsMatch();
            tString.tEquals1();
            tString.tEquals2();
            tString.tContains();
            tString.tIsNullOrEmpty();
            tString.tSplit(); 
            tString.tFindMatches();
            tString.tIndexOf();
            tString.tCompareTo();
            tString.tCompare1(); 
            tString.tCompare2();
            tString.tCharAt();
        } }
        { tString, tToString, {  }, { static }, {  }, string, {
            string testValue = "abc";
            string testResult = testValue.toString();
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.toString() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult != databaseResult)
                {
                    writeLog.writeError("string.toString: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.toString: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tToString:(); 
                if(testResult != serverResult)  
                {
                    writeLog.writeError("string.toString: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                }
                else
                {
                  
                    writeLog.write("string.toString: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toString()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tSubstring, {  }, { static }, {  }, string , {  
            string testValue = "012345678901234567890123456";
            string testResult =testValue.subString(9,11);
            scene(server) 
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.subString(9,11) tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult != databaseResult)
                {
                    writeLog.writeError("string.substring: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.subString(9,11)\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.substring: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.subString(9,11)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client) 
            {
                string serverResult = tString.:server tSubstring:(); 
                if(testResult != serverResult)  
                {
                    writeLog.writeError("string.substring: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.subString(2,11)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                }
                else
                {
                  
                    writeLog.write("string.substring: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.subString(2,11)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tTrim, {  }, { static }, { }, string, {
            string testValue = "  werfew  ";
            string testResult = testValue.trim();
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.trim() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.trim: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.trim()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.trim: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.trim()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tTrim:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.trim: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.trim()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.trim: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.trim()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tRTrim, {  }, { static }, { }, string, {
            string testValue = "  werfew  ";
            string testResult = testValue.rTrim();
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.rTrim() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.rTrim: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.rTrim()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.rTrim: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.rTrim()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tRTrim:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.rTrim: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.rTrim()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.rTrim: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.rTrim()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }   
        { tString, tLTrim, {  }, { static }, { }, string, {
            string testValue = "  werfew  ";
            string testResult = testValue.lTrim();
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.lTrim() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.lTrim: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.lTrim()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.lTrim: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.lTrim()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tLTrim:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.lTrim: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.lTrim()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.lTrim: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.lTrim()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }   
        { tString, tRemove1, {  }, { static }, { }, string, {
            string testValue = "abcdefgh";
            string testResult = testValue.remove(3);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                string serverResult = tString.:server tRemove1:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.remove(返回当前字符串删除指定索引到末尾的全部字符后的新字符串): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.remove(3)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.remove(返回当前字符串删除指定索引到末尾的全部字符后的新字符串): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.remove(3))\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tRemove2, {  }, { static }, { }, string, {
            string testValue = "abcdefgh";
            string testResult = testValue.remove(3,5);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                string serverResult = tString.:server tRemove2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.remove(返回当前字符串删除指定索引到末尾的全部字符后的新字符串): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.remove(3)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.remove(返回当前字符串删除从索引1到索引2的全部字符后的新字符串): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.remove(3,5))\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tToUpper, {  }, { static }, { }, string, {
            string testValue = "  werfew  ";
            string testResult = testValue.toUpper();
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.toUpper() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.toUpper: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toUpper()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.toUpper: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toUpper()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tToUpper:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.toUpper: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toUpper()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.toUpper: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toUpper()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tToLower, {  }, { static }, { }, string, {
            string testValue = "  werfew  ";
            string testResult = testValue.toLower();
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.toLower() tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.toLower: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toLower()\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.toLower: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toLower()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tToLower:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.toLower: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toLower()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.toLower: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toLower()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tReplaceReg, {  }, { static }, {  }, string, {
            string testValue = "123456";
            string testResult = testValue.replaceReg("[1-9]","12",RegexMode.multiIgnoreCase);
            scene(server)
            {
                
            }
            scene(web,client)
            {
                string serverResult = tString.:server tReplaceReg:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.replaceReg: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replaceReg(\"[1-9]\",\"12\",RegexMode.multiIgnoreCase)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.replaceReg: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replaceReg(\"[1-9]\",\"12\",RegexMode.multiIgnoreCase)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tReplaceFirst, {  }, { static }, {  }, string, {
            string testValue = "1a2b3c";
            string testResult = testValue.replaceFirst("a2","A2two");
            scene(server)
            {

            }
            scene(web,client)
            {
                string serverResult = tString.:server tReplaceFirst:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.replaceFirst: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replaceFirst(\"a2\",\"A2two\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.replaceFirst: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replaceFirst(\"a2\",\"A2two\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tReplace, {  }, { static }, { }, string, {
            string testValue = "1a1a1a";
            string testResult = testValue.replace("a","A1");
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.replace("a","A1") tmpv by default  from testTable a where a.iID == testTableID; 
                string databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.replace: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replace(\"a\",\"A1\")\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.replace: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replace(\"a\",\"A1\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }
            }
            scene(web,client)
            {
                string serverResult = tString.:server tReplace:(); 
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.replace: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replace(\"a\",\"A1\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.replace: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.replace(\"a\",\"A1\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }     
        { tString, tInsert, {  }, { static }, {  }, string, {
            string testValue = "1a1a1a";
            string testResult = testValue.insert(3,"A1");
            scene(server)
            {

            }
            scene(web,client)
            {
                string serverResult = tString.:server tInsert:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.insert: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.insert(3,\"A1\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.insert: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.insert(3,\"A1\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tJoin1, {  }, { static }, {  }, string, {
            string[] testValue = {"one","two","three"};
            string testResult = string.join("+",testValue);
            scene(server)
            {
           
            }
            scene(web,client)
            {
                string serverResult = tString.:server tJoin1:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.join(用指定分隔符连接指定字符串数组的全部成员，返回拼接后的字符串): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.join(\"+\",testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.join(用指定分隔符连接指定字符串数组的全部成员，返回拼接后的字符串): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.join(\"+\",testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
              
                }
            }
            return testResult;
        } }
        { tString, tJoin2, {  }, { static }, {  }, string, {
            OBJECT[] testValue = {"one","two","three"};
            string testResult = string.join("+",testValue);
            scene(server)
            {
           
            }
            scene(web,client)
            {
                string serverResult = tString.:server tJoin2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.join(用指定分隔符连接指定数组的全部成员，返回拼接后的字符串): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.join(\"+\",testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.join(用指定分隔符连接指定数组的全部成员，返回拼接后的字符串): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.join(\"+\",testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
              
                }
            }
            return testResult;
        } }  
        { tString, tConcat, {  }, { static }, {  }, string, {
            string[] testValue = {"one","two","three"};
            string testResult = string.concat(testValue);
            scene(server)
            {
           
            }
            scene(web,client)
            {
                string serverResult = tString.:server tConcat:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.concat: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.concat(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.concat: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.concat(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
              
                }
            }
            return testResult;
        } }      
        { tString, tToCharArray, {  }, { static }, { }, char[], {
            string testValue = "  WDFF wf  ";
            char[] testResult = testValue.toCharArray();
            scene(server)
            {
            
            }
            scene(web,client)
            {
                var serverResult = tString.:server tToCharArray:();
                if(testResult.toString()!=serverResult.toString())
                {
                    writeLog.writeError("string.toCharArray: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toCharArray()\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.toCharArray: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.toCharArray()\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tStartsWith, {  }, { static }, {  }, bool, {
            string testValue = "WDFF wf  ";
            bool testResult = testValue.startsWith("W");
            scene(server)
            {
             
            }
            scene(web,client)
            {
                var serverResult = tString.:server tStartsWith:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.startsWith: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.startsWith(\"W\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.startsWith: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.startsWith(\"W\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tEndsWith, {  }, { static }, {  }, bool, {
            string testValue = "WDFF wf";
            bool testResult = testValue.endsWith("f");
            scene(server)
            {
                
            }
            scene(web,client)
            {
                var serverResult = tString.:server tEndsWith:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.endsWith: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.endsWith(\"f\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.endssWith: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.endsWith(\"f\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tIsMatch, {  }, { static }, {  }, bool, {
            string testValue = "WDFFwf";
            bool testResult = testValue.isMatch("[A-Za-z]",RegexMode.multiIgnoreCase);
            scene(server)
            {
              
            }
            scene(web,client)
            {
                var serverResult = tString.:server tIsMatch:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.isMatch: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.isMatch(\"[A-Za-z]\",RegexMode.multiIgnoreCase)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.isMatch: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.isMatch(\"[A-Za-z]\",RegexMode.multiIgnoreCase)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tEquals1, {  }, { static }, {  }, bool, {
            string testValue = "WDFFwf";
            bool testResult = testValue.equals("WDFFwf");
            scene(server)
            {
                
            }
            scene(web,client)
            {
                var serverResult = tString.:server tEquals1:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.equals(判断当前字符串是否等于指定字符串): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(\"WDFFwf\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.equals(判断当前字符串是否等于指定字符串): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(\"WDFFwf\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tEquals2, {  }, { static }, {  }, bool, {
            OBJECT testValue = "WDFFwf";
            bool testResult = testValue.equals("WDFFwf");
            scene(server)
            {
       
            }
            scene(web,client)
            {
                var serverResult = tString.:server tEquals2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.equals(判断当前字符串是否等于指定对象): server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(\"WDFFwf\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.equals(判断当前字符串是否等于指定对象): server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.equals(\"WDFFwf\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tContains, {  }, { static }, {  }, bool, {
            string testValue = "WDFFwf";
            bool testResult = testValue.contains("WDFF");
            scene(server)
            {

            }
            scene(web,client)
            {
                var serverResult = tString.:server tContains:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.contains: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.contains(\"WDFF\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.contains: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.contains(\"WDFF\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }  
        { tString, tIsNullOrEmpty, {  }, { static }, {  }, bool, {
            string testValue = "";
            bool testResult = string.isNullOrEmpty(testValue);
            scene(server)
            {
     
            }
            scene(web,client)
            {
                var serverResult = tString.:server tIsNullOrEmpty:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.isNullOrEmpty: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.isNullOrEmpty(testValue)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.isNullOrEmpty: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = string.isNullOrEmpty(testValue)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }     
        { tString, tSplit, {  }, { static }, { }, string[], {
            string testValue = "123(abc(!@#";
            string[] testResult = testValue.split('(');
            scene(server)
            {

            }
            scene(web,client)
            {
                var serverResult = tString.:server tSplit:();
                if(testResult.toString()!=serverResult.toString())
                {
                    writeLog.writeError("string.split: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.split('(')\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.split: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.split('(')\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tFindMatches, {  }, { static }, { }, string[], {
            string testValue = "123abc\r\n123";
            string[] testResult = testValue.matches("[A_Z]",RegexMode.multiIgnoreCase);
            scene(server)
            {

            }
            scene(web,client)
            {
                var serverResult = tString.:server tFindMatches:();
                if(testResult.toString()!=serverResult.toString())
                {
                    writeLog.writeError("string.findMatches: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.findMatches(\"[A_Z]\",RegexMode.multiIgnoreCase)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.findMatches: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.findMatches(\"[1-9]\",RegexMode.multiIgnoreCase)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tIndexOf, {  }, { static }, { }, int, {
            string testValue = "123(abc(!@#";
            int testResult = testValue.indexOf("(");
            scene(server)
            {
                Row~testTable stringRow = new Row()~testTable;
                stringRow.iString= testValue;
                int testTableID = System.autoID(testTable.:to:);
                stringRow.iID = testTableID;
                insert by stringRow;
                var databaseRsultList =  select a.iString.indexOf("(") tmpv by default  from testTable a where a.iID == testTableID; 
                int databaseResult = databaseRsultList.rows[0].tmpv;
                if(testResult!=databaseResult)
                {
                    writeLog.writeError("string.indexOf: server和database数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.indexOf(\"(\")\r\nserver结果：" + testResult + "\r\ndatabase结果：" + databaseResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.indexOf: server和database数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.indexOf(\"(\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");                    
                }

            }
            scene(web,client)
            {
                var serverResult = tString.:server tIndexOf:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.indexOf: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.indexOf(\"(\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.indexOf: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.indexOf(\"(\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tCompareTo, {  }, { static }, { }, int, {
            string testValue = "abcdef";
            int testResult = testValue.compareTo("ABCDEF");
            scene(server)
            {
  
            }
            scene(web,client)
            {
                var serverResult = tString.:server tCompareTo:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.compareTo: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.compareTo(\"ABCDEF\")\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.compareTo: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.compareTo(\"ABCDEF\")\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tCompare1, {  }, { static }, { }, int, {
            string testValue1 = "abcdef";
            string testValue2 = "ABCDEF";
            int testResult = string.compare(testValue1,testValue2);
            scene(server)
            {

            }
            scene(web,client)
            {
                var serverResult = tString.:server tCompare1:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.compare(按字典顺序比较两个字符串, 返回指示前者是小于、等于还是大于后者的整数): server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = string.compare(testValue1,testValue2)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.compare(按字典顺序比较两个字符串, 返回指示前者是小于、等于还是大于后者的整数): server和web数据一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = string.compare(testValue1,testValue2)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tCompare2, {  }, { static }, { }, int, {
            string testValue1 = "abcdef";
            string testValue2 = "ABCDEF";
            int testResult = string.compare(testValue1,1,testValue2,1,3);
            scene(server)
            {

            }
            scene(web,client)
            {
                
                var serverResult = tString.:server tCompare2:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.compare(按字典顺序比较两个字符串在指定索引指定长度上的子字符串, 返回指示前者是小于、等于还是大于后者的整数): server和web数据不一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = string.compare(testValue1,1,testValue2,1,3)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.compare(按字典顺序比较两个字符串在指定索引指定长度上的子字符串, 返回指示前者是小于、等于还是大于后者的整数): server和web数据一致\r\n输入数据1：" + testValue1 + "。输入数据2:" + testValue2 + "\r\n表达式：testResult = string.compare(testValue1,1,testValue2,1,3)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { tString, tCharAt, {  }, { static }, { }, char, {
            string testValue = "abcdef";
            char testResult = testValue.charAt(4);
            scene(server)
            {

            }
            scene(web,client)
            {
                var serverResult = tString.:server tCharAt:();
                if(testResult!=serverResult)
                {
                    writeLog.writeError("string.charAt: server和web数据不一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.charAt(4)\r\nserver结果：" + serverResult + "\r\nweb结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
                else
                {
                    writeLog.write("string.charAt: server和web数据一致\r\n输入数据：" + testValue + "\r\n表达式：testResult = testValue.charAt(4)\r\n结果：" + testResult + "\r\n" + datetime.getNow().toString() + "\r\n");
                }
            }
            return testResult;
        } }
        { writeLog, write "写正常日志", {  }, { static }, { string f_log "日志内容" }, void, {  
            scene(server) 
            {
                File.write("d:\\TestLog\\ByTest\\Test.txt", f_log,true );
                
            }
            scene(client,web) 
            {
               
               writeLog.:server write:(f_log);
            }
        } }
        { writeLog, writeError "写错误日志", {  }, { static }, { string f_errorLog "错误日志内容" }, void, {  
            scene(server) 
            {
                //File.write("d:\\TestLog\\ByTest\\TestError.txt", f_errorLog,true );
            }
            scene(client,web) 
            {
                writeLog.:server writeError:(f_errorLog);
            }
        } }

    }
}